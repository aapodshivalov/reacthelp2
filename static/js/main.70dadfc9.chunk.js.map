{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["code1_","code1","code2_","code2","App","state","renderAria","_ref","code","strCode","react_default","a","createElement","lib_default","value","_this","onValueChange","setState","highlight","languages","js","padding","style","fontFamily","fontSize","background","console","log","styles","centerStyle","className","Header","as","textAlign","margin","Grid","celled","centered","columns","Row","Column","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAaMA,EAAM,mMAWNC,EAAK,QAGLC,EAAM,iPAcNC,EAAK,8OA6EIC,6MA5DbC,MAAQ,CACNL,SACAC,QACAC,SACAC,WAGFG,WAAa,SAAAC,GAAuBA,EAApBC,KAAoB,IAAdC,EAAcF,EAAdE,QAEpB,OAAOC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACLG,MAAOC,EAAKV,MAAMI,GAClBO,cAAe,SAAAR,GAAI,OAAIO,EAAKE,SAAS,CAAET,UACvCU,UAAW,SAAAV,GAAI,OAAIU,oBAAUV,EAAMW,YAAUC,KAC7CC,QAAS,GACTC,MAAO,CACLC,WAAY,sCACZC,SAAU,GACVC,WAAY,mFAOhB,OADAC,QAAQC,IAAI,qBAAsBC,IAAOC,aAEvCnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAWF,IAAOC,aACrBnB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAASX,MAAO,CAACY,OAAQ,SAAnD,cACAxB,EAAAC,EAAAC,cAAA,OAAKkB,UAAWF,IAAOC,aACvBnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,QAAM,EAACC,UAAQ,EAACC,QAAS,GAC7B5B,EAAAC,EAAAC,cAACuB,EAAA,EAAKI,IAAN,CAAUF,UAAQ,EAACC,QAAS,GAC1B5B,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,gBAGA9B,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,cAIF9B,EAAAC,EAAAC,cAACuB,EAAA,EAAKI,IAAN,CAAUF,UAAQ,EAACC,QAAS,GAC1B5B,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,KACGC,KAAKnC,WAAW,CAAEE,KAAMR,EAAQS,QAAS,YAE5CC,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,KACGC,KAAKnC,WAAW,CAAEE,KAAMP,EAAOQ,QAAS,YAG7CC,EAAAC,EAAAC,cAACuB,EAAA,EAAKI,IAAN,CAAUF,UAAQ,EAACC,QAAS,GAC1B5B,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,KACGC,KAAKnC,WAAW,CAAEE,KAAMN,EAAQO,QAAS,YAE5CC,EAAAC,EAAAC,cAACuB,EAAA,EAAKK,OAAN,KACGC,KAAKnC,WAAW,CAAEE,KAAML,EAAOM,QAAS,sBApDrCiC,IAAMC,WC5CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAKvB,OAAQA,MAAWwB,SAASC,eAAe,SD0H1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70dadfc9.chunk.js","sourcesContent":["import Prism from 'prismjs';\n\nimport React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-css';\nimport 'semantic-ui-css/semantic.min.css';\n// import \"prism.css\";\nimport { Grid, Image, Header, Segment } from 'semantic-ui-react'\nimport styles from './App.css';\n\nconst code1_ = `import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction App() {\n  return (\n    <h1>Hello world</h1>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n`;\nconst code1 = `???\n`;\n\nconst code2_ = `// Method inside the component\nuserClick(event){\n let id = event.currentTarget.dataset.className;\n console.log(id); // should return id\n}\n// when render element\n<a\n  className={id}\n  onClick={this.userClick}\n>\n  Click me\n</a>\n`;\n\nconst code2 = `// Method inside the component\nuserClick(event){\n let id = event.currentTarget.dataset.index;\n console.log(id); // should return id\n}\n// when render element\n<a\n  data-index={id}\n  onClick={this.userClick}\n>\n  Click me\n</a>\n`;\n\n\nclass App extends React.Component {\n\n  state = {\n    code1_,\n    code1,\n    code2_,\n    code2,\n   };\n\n  renderAria = ({ code, strCode }) => {\n\n    return <Editor\n      value={this.state[strCode]}\n      onValueChange={code => this.setState({ code })}\n      highlight={code => highlight(code, languages.js)}\n      padding={10}\n      style={{\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n        fontSize: 12,\n        background: '#eee',\n      }}\n    />\n  }\n\n  render() {\n    console.log('styles.centerStyle', styles.centerStyle);\n    return (\n      <div className={styles.centerStyle}>\n        <Header as='h2' textAlign='center' style={{margin: '1rem'}}>React help</Header>\n        <div className={styles.centerStyle}>\n        <Grid celled centered columns={2}>\n          <Grid.Row centered columns={2}>\n            <Grid.Column>\n              Not bad\n            </Grid.Column>\n            <Grid.Column>\n              Good\n            </Grid.Column>\n        </Grid.Row>\n          <Grid.Row centered columns={2}>\n            <Grid.Column>\n              {this.renderAria({ code: code1_, strCode: 'code1_' })}\n            </Grid.Column>\n            <Grid.Column>\n              {this.renderAria({ code: code1, strCode: 'code1' })}\n            </Grid.Column>\n        </Grid.Row>\n          <Grid.Row centered columns={2}>\n            <Grid.Column>\n              {this.renderAria({ code: code2_, strCode: 'code2_' })}\n            </Grid.Column>\n            <Grid.Column>\n              {this.renderAria({ code: code2, strCode: 'code2' })}\n            </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport styles from './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App styles={styles}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}